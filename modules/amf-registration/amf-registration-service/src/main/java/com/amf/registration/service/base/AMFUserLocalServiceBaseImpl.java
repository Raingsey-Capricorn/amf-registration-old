/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 * <p>
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * <p>
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.amf.registration.service.base;

import com.amf.registration.model.AMFUser;
import com.amf.registration.service.AMFUserLocalService;
import com.amf.registration.service.persistence.AMFUserPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.service.persistence.BasePersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the amf user local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.amf.registration.service.impl.AMFUserLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @generated
 * @see com.amf.registration.service.impl.AMFUserLocalServiceImpl
 */
public abstract class AMFUserLocalServiceBaseImpl
        extends BaseLocalServiceImpl
        implements AMFUserLocalService, AopService, IdentifiableOSGiService {

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Use <code>AMFUserLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.amf.registration.service.AMFUserLocalServiceUtil</code>.
     */

    /**
     * Adds the amf user to the database. Also notifies the appropriate model listeners.
     *
     * <p>
     * <strong>Important:</strong> Inspect AMFUserLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
     * </p>
     *
     * @param amfUser the amf user
     * @return the amf user that was added
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public AMFUser addAMFUser(AMFUser amfUser) {
        amfUser.setNew(true);

        return amfUserPersistence.update(amfUser);
    }

    /**
     * Creates a new amf user with the primary key. Does not add the amf user to the database.
     *
     * @param amfUserId the primary key for the new amf user
     * @return the new amf user
     */
    @Override
    @Transactional(enabled = false)
    public AMFUser createAMFUser(long amfUserId) {
        return amfUserPersistence.create(amfUserId);
    }

    /**
     * Deletes the amf user with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * <p>
     * <strong>Important:</strong> Inspect AMFUserLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
     * </p>
     *
     * @param amfUserId the primary key of the amf user
     * @return the amf user that was removed
     * @throws PortalException if a amf user with the primary key could not be found
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public AMFUser deleteAMFUser(long amfUserId) throws PortalException {
        return amfUserPersistence.remove(amfUserId);
    }

    /**
     * Deletes the amf user from the database. Also notifies the appropriate model listeners.
     *
     * <p>
     * <strong>Important:</strong> Inspect AMFUserLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
     * </p>
     *
     * @param amfUser the amf user
     * @return the amf user that was removed
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public AMFUser deleteAMFUser(AMFUser amfUser) {
        return amfUserPersistence.remove(amfUser);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(
                AMFUser.class, clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     */
    @Override
    public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
        return amfUserPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.amf.registration.model.impl.AMFUserModelImpl</code>.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start        the lower bound of the range of model instances
     * @param end          the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     */
    @Override
    public <T> List<T> dynamicQuery(
            DynamicQuery dynamicQuery, int start, int end) {

        return amfUserPersistence.findWithDynamicQuery(
                dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.amf.registration.model.impl.AMFUserModelImpl</code>.
     * </p>
     *
     * @param dynamicQuery      the dynamic query
     * @param start             the lower bound of the range of model instances
     * @param end               the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     */
    @Override
    public <T> List<T> dynamicQuery(
            DynamicQuery dynamicQuery, int start, int end,
            OrderByComparator<T> orderByComparator) {

        return amfUserPersistence.findWithDynamicQuery(
                dynamicQuery, start, end, orderByComparator);
    }

    /**
     * Returns the number of rows matching the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows matching the dynamic query
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery) {
        return amfUserPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows matching the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection   the projection to apply to the query
     * @return the number of rows matching the dynamic query
     */
    @Override
    public long dynamicQueryCount(
            DynamicQuery dynamicQuery, Projection projection) {

        return amfUserPersistence.countWithDynamicQuery(
                dynamicQuery, projection);
    }

    @Override
    public AMFUser fetchAMFUser(long amfUserId) {
        return amfUserPersistence.fetchByPrimaryKey(amfUserId);
    }

    /**
     * Returns the amf user matching the UUID and group.
     *
     * @param uuid    the amf user's UUID
     * @param groupId the primary key of the group
     * @return the matching amf user, or <code>null</code> if a matching amf user could not be found
     */
    @Override
    public AMFUser fetchAMFUserByUuidAndGroupId(String uuid, long groupId) {
        return amfUserPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the amf user with the primary key.
     *
     * @param amfUserId the primary key of the amf user
     * @return the amf user
     * @throws PortalException if a amf user with the primary key could not be found
     */
    @Override
    public AMFUser getAMFUser(long amfUserId) throws PortalException {
        return amfUserPersistence.findByPrimaryKey(amfUserId);
    }

    @Override
    public ActionableDynamicQuery getActionableDynamicQuery() {
        ActionableDynamicQuery actionableDynamicQuery =
                new DefaultActionableDynamicQuery();

        actionableDynamicQuery.setBaseLocalService(amfUserLocalService);
        actionableDynamicQuery.setClassLoader(getClassLoader());
        actionableDynamicQuery.setModelClass(AMFUser.class);

        actionableDynamicQuery.setPrimaryKeyPropertyName("amfUserId");

        return actionableDynamicQuery;
    }

    @Override
    public IndexableActionableDynamicQuery
    getIndexableActionableDynamicQuery() {

        IndexableActionableDynamicQuery indexableActionableDynamicQuery =
                new IndexableActionableDynamicQuery();

        indexableActionableDynamicQuery.setBaseLocalService(
                amfUserLocalService);
        indexableActionableDynamicQuery.setClassLoader(getClassLoader());
        indexableActionableDynamicQuery.setModelClass(AMFUser.class);

        indexableActionableDynamicQuery.setPrimaryKeyPropertyName("amfUserId");

        return indexableActionableDynamicQuery;
    }

    protected void initActionableDynamicQuery(
            ActionableDynamicQuery actionableDynamicQuery) {

        actionableDynamicQuery.setBaseLocalService(amfUserLocalService);
        actionableDynamicQuery.setClassLoader(getClassLoader());
        actionableDynamicQuery.setModelClass(AMFUser.class);

        actionableDynamicQuery.setPrimaryKeyPropertyName("amfUserId");
    }

    @Override
    public ExportActionableDynamicQuery getExportActionableDynamicQuery(
            final PortletDataContext portletDataContext) {

        final ExportActionableDynamicQuery exportActionableDynamicQuery =
                new ExportActionableDynamicQuery() {

                    @Override
                    public long performCount() throws PortalException {
                        ManifestSummary manifestSummary =
                                portletDataContext.getManifestSummary();

                        StagedModelType stagedModelType = getStagedModelType();

                        long modelAdditionCount = super.performCount();

                        manifestSummary.addModelAdditionCount(
                                stagedModelType, modelAdditionCount);

                        long modelDeletionCount =
                                ExportImportHelperUtil.getModelDeletionCount(
                                        portletDataContext, stagedModelType);

                        manifestSummary.addModelDeletionCount(
                                stagedModelType, modelDeletionCount);

                        return modelAdditionCount;
                    }

                };

        initActionableDynamicQuery(exportActionableDynamicQuery);

        exportActionableDynamicQuery.setAddCriteriaMethod(
                new ActionableDynamicQuery.AddCriteriaMethod() {

                    @Override
                    public void addCriteria(DynamicQuery dynamicQuery) {
                        portletDataContext.addDateRangeCriteria(
                                dynamicQuery, "modifiedDate");
                    }

                });

        exportActionableDynamicQuery.setCompanyId(
                portletDataContext.getCompanyId());

        exportActionableDynamicQuery.setPerformActionMethod(
                new ActionableDynamicQuery.PerformActionMethod<AMFUser>() {

                    @Override
                    public void performAction(AMFUser amfUser)
                            throws PortalException {

                        StagedModelDataHandlerUtil.exportStagedModel(
                                portletDataContext, amfUser);
                    }

                });
        exportActionableDynamicQuery.setStagedModelType(
                new StagedModelType(
                        PortalUtil.getClassNameId(AMFUser.class.getName())));

        return exportActionableDynamicQuery;
    }

    /**
     * @throws PortalException
     */
    public PersistedModel createPersistedModel(Serializable primaryKeyObj)
            throws PortalException {

        return amfUserPersistence.create(((Long) primaryKeyObj).longValue());
    }

    /**
     * @throws PortalException
     */
    @Override
    public PersistedModel deletePersistedModel(PersistedModel persistedModel)
            throws PortalException {

        return amfUserLocalService.deleteAMFUser((AMFUser) persistedModel);
    }

    public BasePersistence<AMFUser> getBasePersistence() {
        return amfUserPersistence;
    }

    /**
     * @throws PortalException
     */
    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
            throws PortalException {

        return amfUserPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns all the amf users matching the UUID and company.
     *
     * @param uuid      the UUID of the amf users
     * @param companyId the primary key of the company
     * @return the matching amf users, or an empty list if no matches were found
     */
    @Override
    public List<AMFUser> getAMFUsersByUuidAndCompanyId(
            String uuid, long companyId) {

        return amfUserPersistence.findByUuid_C(uuid, companyId);
    }

    /**
     * Returns a range of amf users matching the UUID and company.
     *
     * @param uuid              the UUID of the amf users
     * @param companyId         the primary key of the company
     * @param start             the lower bound of the range of amf users
     * @param end               the upper bound of the range of amf users (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the range of matching amf users, or an empty list if no matches were found
     */
    @Override
    public List<AMFUser> getAMFUsersByUuidAndCompanyId(
            String uuid, long companyId, int start, int end,
            OrderByComparator<AMFUser> orderByComparator) {

        return amfUserPersistence.findByUuid_C(
                uuid, companyId, start, end, orderByComparator);
    }

    /**
     * Returns the amf user matching the UUID and group.
     *
     * @param uuid    the amf user's UUID
     * @param groupId the primary key of the group
     * @return the matching amf user
     * @throws PortalException if a matching amf user could not be found
     */
    @Override
    public AMFUser getAMFUserByUuidAndGroupId(String uuid, long groupId)
            throws PortalException {

        return amfUserPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the amf users.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.amf.registration.model.impl.AMFUserModelImpl</code>.
     * </p>
     *
     * @param start the lower bound of the range of amf users
     * @param end   the upper bound of the range of amf users (not inclusive)
     * @return the range of amf users
     */
    @Override
    public List<AMFUser> getAMFUsers(int start, int end) {
        return amfUserPersistence.findAll(start, end);
    }

    /**
     * Returns the number of amf users.
     *
     * @return the number of amf users
     */
    @Override
    public int getAMFUsersCount() {
        return amfUserPersistence.countAll();
    }

    /**
     * Updates the amf user in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * <p>
     * <strong>Important:</strong> Inspect AMFUserLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
     * </p>
     *
     * @param amfUser the amf user
     * @return the amf user that was updated
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public AMFUser updateAMFUser(AMFUser amfUser) {
        return amfUserPersistence.update(amfUser);
    }

    @Override
    public Class<?>[] getAopInterfaces() {
        return new Class<?>[]{
                AMFUserLocalService.class, IdentifiableOSGiService.class,
                PersistedModelLocalService.class
        };
    }

    @Override
    public void setAopProxy(Object aopProxy) {
        amfUserLocalService = (AMFUserLocalService) aopProxy;
    }

    /**
     * Returns the OSGi service identifier.
     *
     * @return the OSGi service identifier
     */
    @Override
    public String getOSGiServiceIdentifier() {
        return AMFUserLocalService.class.getName();
    }

    protected Class<?> getModelClass() {
        return AMFUser.class;
    }

    protected String getModelClassName() {
        return AMFUser.class.getName();
    }

    /**
     * Performs a SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) {
        try {
            DataSource dataSource = amfUserPersistence.getDataSource();

            DB db = DBManagerUtil.getDB();

            sql = db.buildSQL(sql);
            sql = PortalUtil.transformSQL(sql);

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
                    dataSource, sql);

            sqlUpdate.update();
        } catch (Exception exception) {
            throw new SystemException(exception);
        }
    }

    protected AMFUserLocalService amfUserLocalService;

    @Reference
    protected AMFUserPersistence amfUserPersistence;

    @Reference
    protected com.liferay.counter.kernel.service.CounterLocalService
            counterLocalService;

    @Reference
    protected com.liferay.portal.kernel.service.ClassNameLocalService
            classNameLocalService;

    @Reference
    protected com.liferay.portal.kernel.service.ResourceLocalService
            resourceLocalService;

    @Reference
    protected com.liferay.portal.kernel.service.UserLocalService
            userLocalService;

    @Reference
    protected com.liferay.asset.kernel.service.AssetEntryLocalService
            assetEntryLocalService;

    @Reference
    protected com.liferay.asset.kernel.service.AssetLinkLocalService
            assetLinkLocalService;

    @Reference
    protected com.liferay.asset.kernel.service.AssetTagLocalService
            assetTagLocalService;

    @Reference
    protected com.liferay.portal.kernel.service.GroupLocalService
            groupLocalService;
}